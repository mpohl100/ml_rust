name: Test Coverage

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y bc jq

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage report
        run: |
          # Generate coverage for each crate in the workspace
          mkdir -p coverage
          
          # Get list of workspace members
          WORKSPACE_MEMBERS=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[].name')
          
          echo "Coverage Report" > coverage/summary.md
          echo "==============" >> coverage/summary.md
          echo "" >> coverage/summary.md
          
          TOTAL_LINES=0
          TOTAL_COVERED=0
          
          for crate in $WORKSPACE_MEMBERS; do
            echo "Generating coverage for crate: $crate"
            
            # Run tarpaulin for each crate
            cargo tarpaulin \
              --package "$crate" \
              --out Json \
              --output-dir coverage \
              --skip-clean \
              --exclude-files "target/*" \
              --exclude-files "*/tests/*" \
              --exclude-files "*/benches/*" \
              || true
            
            # Rename the output file to be crate-specific
            if [ -f "coverage/tarpaulin-report.json" ]; then
              mv "coverage/tarpaulin-report.json" "coverage/${crate}-report.json"
              
              # Extract coverage percentage for this crate
              if [ -f "coverage/${crate}-report.json" ]; then
                LINES=$(jq -r '.files | map(.coverable) | add // 0' "coverage/${crate}-report.json")
                COVERED=$(jq -r '.files | map(.covered) | add // 0' "coverage/${crate}-report.json")
                
                if [ "$LINES" -gt 0 ]; then
                  PERCENT=$(echo "scale=2; $COVERED * 100 / $LINES" | bc -l)
                  echo "| $crate | $COVERED/$LINES | ${PERCENT}% |" >> coverage/summary.md
                  
                  TOTAL_LINES=$((TOTAL_LINES + LINES))
                  TOTAL_COVERED=$((TOTAL_COVERED + COVERED))
                else
                  echo "| $crate | 0/0 | N/A |" >> coverage/summary.md
                fi
              fi
            fi
          done
          
          # Add header after we know we have data
          sed -i '3i| Crate | Lines Covered | Coverage % |' coverage/summary.md
          sed -i '4i|-------|---------------|------------|' coverage/summary.md
          
          # Add total coverage
          if [ "$TOTAL_LINES" -gt 0 ]; then
            TOTAL_PERCENT=$(echo "scale=2; $TOTAL_COVERED * 100 / $TOTAL_LINES" | bc -l)
            echo "" >> coverage/summary.md
            echo "**Total Coverage: $TOTAL_COVERED/$TOTAL_LINES (${TOTAL_PERCENT}%)**" >> coverage/summary.md
          fi
          
          echo "" >> coverage/summary.md
          echo "Generated at: $(date)" >> coverage/summary.md

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const coverage = fs.readFileSync('coverage/summary.md', 'utf8');
              
              const body = '## 📊 Test Coverage Report\n\n' + coverage + '\n\n<details>\n<summary>📋 Coverage Details</summary>\n\nThis report shows the test coverage for each Rust crate in the workspace.\n\n- **Lines Covered**: Number of executable lines covered by tests\n- **Coverage %**: Percentage of lines covered\n- Report generated by [cargo-tarpaulin](https://github.com/xd009642/tarpaulin)\n\n</details>';`;

              // Find existing coverage comment
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const coverageComment = comments.data.find(comment => 
                comment.body.includes('📊 Test Coverage Report')
              );

              if (coverageComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: coverageComment.id,
                  body: body
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
              }
            } catch (error) {
              console.error('Error reading coverage report:', error);
              
              // Post error comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '⚠️ Unable to generate coverage report. Please check the workflow logs for details.'
              });
            }

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30